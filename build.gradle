plugins {
    id 'net.minecrell.licenser' version '0.4.1'
    id "com.github.sherter.google-java-format" version "0.9"
    id "net.ltgt.errorprone" version "1.3.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.sherter.google-java-format'

googleJavaFormat {
    toolVersion '1.5'
    include '**/*.java'
    exclude '**/generated-sources/*'
}

group = 'com.uber'
version = '0.0.1'

description = """Samples for Cadence. Based on samples for AWS SWF"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    // replace with mavenLocal() if you want to test local change from Cadence Java Client (use publishToMarvenLocal to override)
    mavenCentral()
}

dependencies {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
    errorprone("com.google.errorprone:error_prone_core:2.4.0")
    compile group: 'com.uber.cadence', name: 'cadence-client', version: '3.7.2'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.9'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.uber.m3', name: 'tally-core', version: '0.10.0'
    compile group: 'com.uber.m3', name: 'tally-prometheus', version: '0.10.0'
    compile group: 'io.prometheus', name: 'simpleclient', version: '0.10.0'
    compile group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.10.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.3'
}

compileJava {
    dependsOn 'googleJavaFormat'
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xdoclint:none"
    options.errorprone.errorproneArgs = ["-XepExcludedPaths:.*/generated-sources/.*"]
    options.warnings = false
}

task execute(type: JavaExec) {
    main = findProperty("mainClass") ?: ""
    classpath = sourceSets.main.runtimeClasspath
}

license {
    header rootProject.file('license-header.txt')
}
